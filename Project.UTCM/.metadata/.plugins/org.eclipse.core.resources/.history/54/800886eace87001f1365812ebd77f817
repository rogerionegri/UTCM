function ACF_Feats, Img, ratio
common pkgStaticVars, nx, tx, txs

  dims = size(Img,/dimensions)
  p = dims[0]-1

  acf_img = fltarr(p/ratio,dims[1],dims[2])
  acf_LBtest = fltarr(2,dims[1],dims[2])
  acf_rmseLinear = fltarr(dims[1],dims[2])
  
  acf_Ftest = fltarr(2,dims[1],dims[2])

  N = n_elements(acf_img[*,0,0])
  
  ;common def...
  __x = indgen(N)
  nx = N
  tx = total(__x)
  txs = total(__x^2)
  

  for i = 0, dims[1]-1 do begin
    for j = 0, dims[2]-1 do begin

      for k = 0, (p/ratio)-1 do acf_img[k,i,j] = a_correlate(Img[*,i,j],k+1)

      ;Ljiung-Box test for lag=1 only
      acf_LBtest[0,i,j] = (acf_img[0,i,j]^2)/float(p -1)  ;for k = 0, 0 do acf_LBtest[0,i,j] += (acf_img[k,i,j]^2)/float( (p/ratio) - (k+1) )
      acf_LBtest[0,i,j] = (p)*(p+2) * acf_LBtest[0,i,j]
      acf_LBtest[1,i,j] = 1 - CHISQR_PDF(acf_LBtest[0,i,j], 1)


;      ;Computing the RMSE
;      data = acf_img[*,i,j]
;      residuals = data[*]*0 + 0
;      reducedError = data[*]*0 + 0  ;<<<addicional for F-Test
;      
;      maxY = data[0]
;      minY = data[-1]
;      a = (minY - maxY)/(p/ratio - 1)
;      b = maxY - a*1
      
      ;OLS Adjust
      adj = f_test_lin(__x, acf_img[*,i,j], N)
      

;      for h = 0, N-1 do residuals[h] = (data[h])[0] - (((h+1)*a)+b)[0]
;      for h = 0, N-1 do reducedError[h] = (data[h] - mean(data))
;      SSE = total(residuals^2)
;      SSTO = total(reducedError^2)
;      F = (SSTO-SSE)/((N-1) - (N-2)) / (SSE/(N-2))
;      
;      acf_Ftest[0,i,j] = F
;      acf_Ftest[1,i,j] = 1.0 -  F_PDF(F, 1, N-2)
;      acf_rmseLinear[i,j] = sqrt(mean(residuals[*]^2))
      
      acf_Ftest[0,i,j] = adj.F
      acf_Ftest[1,i,j] = adj.pVal
      acf_rmseLinear[i,j] = adj.rmse

    endfor
  endfor


  Return, {lags: acf_img, $
           LB: acf_LBtest, $
           FT: acf_Ftest, $
           rmseLinear: acf_rmseLinear}
END






;;;;BKP 4jul23



;function ACF_Feats, Img
;
;  dims = size(Img,/dimensions)
;  p = dims[0]-1
;
;  acf_img = fltarr(p/2,dims[1],dims[2])
;  ;acf_pr = fltarr(dims[1],dims[2])
;  ;acf_lagNullRho = fltarr(dims[1],dims[2])
;  ;acf_ratio = fltarr(dims[1],dims[2])
;  acf_LBtest = fltarr(2,dims[1],dims[2])
;  ;acf_LBtest_lag1 = fltarr(2,dims[1],dims[2])
;  ;acf_chiLinear = fltarr(2,dims[1],dims[2])
;  acf_rmseLinear = fltarr(dims[1],dims[2])
;  ;acf_rmseLinear_norm = fltarr(dims[1],dims[2])
;
;  N = n_elements(acf_img[*,0,0])
;
;  for i = 0, dims[1]-1 do begin
;    for j = 0, dims[2]-1 do begin
;
;      ;    sumPositiveRho = 0.0
;      ;    sumNegativeRho = 0.0
;      ;    flag = 1
;      ;    contPos = 0
;
;      for k = 0, (p/2)-1 do begin
;        acf_img[k,i,j] = a_correlate(Img[*,i,j],k+1)
;
;        ;      if (acf_img[k,i,j] ge 0) and flag then begin
;        ;        sumPositiveRho += acf_img[k,i,j]
;        ;        contPos++
;        ;      endif else flag = 0
;
;        ;if ~flag then sumNegativeRho += abs(acf_img[k,i,j])
;
;      endfor
;
;      ;    acf_pr[i,j] = sumPositiveRho
;      ;    ;acf_ratio[i,j] = sumPositiveRho/sumNegativeRho
;      ;    ;acf_ratio[i,j] = (sumPositiveRho)/(sumNegativeRho)
;      ;    acf_ratio[i,j] = (sumNegativeRho eq 0) ? sumPositiveRho : (sumPositiveRho)/(sumNegativeRho)
;      ;    acf_lagNullRho[i,j] = contPos
;      ;
;      ;    for k = 0, (p/2)-2 do acf_LBtest[0,i,j] += (acf_img[k,i,j]^2)/float( (p/2) - (k+1) )
;      ;    acf_LBtest[0,i,j] = (p/2)*(p/2 + 2) * acf_LBtest[0,i,j]
;      ;    ;acf_LBtest[1,i,j] = 1 - CHISQR_PDF(acf_LBtest[0,i,j], (p/2))
;      ;    acf_LBtest[1,i,j] = 1 - CHISQR_PDF(acf_LBtest[0,i,j], (p/2) - 1 - 1)
;      ;
;      ;    acf_LBtest_lag1[1,i,j] = 1 - CHISQR_PDF(acf_LBtest[0,i,j], (p/2) - 1 - 1)
;
;      ;Ljiung-Box test for lag=1 only
;      ;for k = 0, 0 do acf_LBtest[0,i,j] += (acf_img[k,i,j]^2)/float( (p/2) - (k+1) )
;      acf_LBtest[0,i,j] = (acf_img[0,i,j]^2)/float(p -1)
;      ;acf_LBtest[0,i,j] = (p/2)*(p/2 + 2) * acf_LBtest[0,i,j]
;      acf_LBtest[0,i,j] = (p)*(p+2) * acf_LBtest[0,i,j]
;      ;acf_LBtest[1,i,j] = 1 - CHISQR_PDF(acf_LBtest[0,i,j], (p/2))
;      acf_LBtest[1,i,j] = 1 - CHISQR_PDF(acf_LBtest[0,i,j], 1)
;
;
;      ;Teste chi-2 sobre modelo linear
;      data = acf_img[*,i,j] ;(acf_img[*,i,j] - min(acf_img[*,i,j])) ;+ 0.1)
;      ;data /= total(data)
;
;      ;maxY = max(data)
;      ;minY = min(data)
;      maxY = data[0]
;      minY = data[-1]
;
;      residuals = data[*]*0 + 0
;      ;    expected = data[*]*0 + 1.0/N
;
;      a = (minY - maxY)/(p/2 - 1)
;      b = maxY - a*1
;
;      for h = 0, N-1 do residuals[h] = (data[h])[0] - (((h+1)*a)+b)[0]
;      ;residuals[*] = residuals[*] - min(residuals[*])
;      ;residuals[*] /= total(residuals[*])
;
;      ;potencial!
;      acf_rmseLinear[i,j] = sqrt(mean(residuals[*]^2))
;      ;acf_rmseLinear_norm[i,j] = sqrt(mean(residuals[*]^2))/(1+abs(maxY-minY))
;      ;acf_rmseLinear_norm[i,j] = sqrt(mean(residuals[*]^2))/(abs(maxY-minY)) < 1 ;(p/2)
;      ;acf_rmseLinear_norm[i,j] = sqrt(mean(residuals[*]^2)) / data[0] < 1
;
;
;      ;if acf_rmseLinear_norm[i,j] gt 398140 then stop
;
;
;      ;acf_rmseLinear[i,j] = sqrt(mean(residuals[*]^2))/exp(data[0])  ;ponderação pela autocorrelação de lag=1
;
;
;
;      ;    for h = 0, N-1 do acf_chiLinear[0,i,j] += ((residuals[h] - expected[h] )^2)/expected[h]
;      ;
;      ;    acf_chiLinear[1,i,j] = 1 - CHISQR_PDF(acf_chiLinear[0,i,j], N-1)
;
;
;
;      ;    if acf_chiLinear[1,i,j] lt 0.05 then begin
;      ;    ;if acf_chiLinear[0,i,j] gt 35 then begin
;      ;      plot, data[*] & xx = data[*]*0
;      ;      for h = 0, N-1 do xx[h] = (h+1)*a+b
;      ;      oplot, xx
;      ;      print, 1 - CHISQR_PDF(acf_chiLinear[0,i,j], N-1)
;      ;      stop
;      ;    endif
;
;
;
;
;      ;    a = (minY - maxY)/(p/2 - 1)
;      ;    b = maxY - a*1
;      ;    for h = 0, N-1 do acf_chiLinear[0,i,j] += ((data[h] - (h+1)*a+b)^2)/abs((h+1)*a+b)
;      ;    acf_chiLinear[1,i,j] = 1 - CHISQR_PDF(acf_chiLinear[0,i,j], N-1)
;      ;
;      ;    ;if acf_chiLinear[1,i,j] lt 0.05 then begin
;      ;    if acf_chiLinear[0,i,j] gt 35 then begin
;      ;      plot, data[*] & xx = data[*]*0
;      ;      for h = 0, N-1 do xx[h] = (h+1)*a+b
;      ;      oplot, xx
;      ;      print, 1 - CHISQR_PDF(acf_chiLinear[0,i,j], N-1)
;      ;      stop
;      ;    endif
;
;
;      ;    maxY = max(acf_img[*,i,j])
;      ;    minY = min(acf_img[*,i,j])
;      ;    a = (minY - maxY)/(p/2 - 1)
;      ;    b = maxY - a*1
;      ;    ;for h = 0, N-1 do acf_chiLinear[0,i,j] += ((acf_img[h,i,j] - (h+1)*a+b)^2)/((h+1)*a+b)
;      ;    for h = 0, N-1 do acf_chiLinear[0,i,j] += ((acf_img[h,i,j] - (h+1)*a+b)^2)/abs((h+1)*a+b)
;      ;    acf_chiLinear[1,i,j] = 1 - CHISQR_PDF(acf_chiLinear[0,i,j], N-1)
;      ;
;      ;    if acf_chiLinear[1,i,j] lt 0.05 then begin
;      ;      plot, acf_img[*,i,j] & xx = acf_img[*,i,j]*0
;      ;      for h = 0, N-1 do xx[h] = (h+1)*a+b
;      ;      oplot, xx
;      ;      print, 1 - CHISQR_PDF(acf_chiLinear[0,i,j], N-1)
;      ;      stop
;      ;    endif
;
;
;    endfor
;  endfor
;
;
;  ;PRINT, CHISQR_CVF(0.100, 3)
;  ;pLB = 1 - CHISQR_PDF(acf_LBtest[i,j], (p/2)-1)
;
;  ;Return, {lags: acf_img, sumPositiveRho: acf_pr, ratio: acf_ratio, count: acf_lagNullRho, $
;  ;         LB: acf_LBtest, ChiLinear: acf_chiLinear, rmseLinear: acf_rmseLinear}
;
;
;  Return, {lags: acf_img, $
;    ;sumPositiveRho: acf_pr, $
;    ;ratio: acf_ratio, $
;    ;count: acf_lagNullRho, $
;    LB: acf_LBtest, $
;    ;ChiLinear: acf_chiLinear, $
;    rmseLinear: acf_rmseLinear};, $
;  ;rmseLinearNorm: acf_rmseLinear_norm}
;
;END





;
;
;
;;;;;;;;BKP
;;
;;;-----------------------------------
;;FUNCTION ACF_LagX, Img
;;
;;  dims = size(Img,/dimensions)
;;  ;p = dims[0]/2; dims[0]-1; floor(alog2(dims[0]))
;;  p = dims[0]-1
;;  ;p = floor(alog2(dims[0]))
;;
;;  ;acf_img = fltarr(p+1,dims[1],dims[2])
;;  acf_img = fltarr(p,dims[1],dims[2])
;;  ;acfx_img = fltarr(dims[1],dims[2])
;;  acf_pr = fltarr(dims[1],dims[2])
;;  acf_prop = fltarr(dims[1],dims[2])
;;  acf_ratio = fltarr(dims[1],dims[2])
;;
;;  for i = 0, dims[1]-1 do begin
;;    for j = 0, dims[2]-1 do begin
;;
;;      sumPositiveRho = 0.0
;;      flag = 1
;;      contPos = 0
;;      for k = 0, p-1 do begin
;;        acf_img[k,i,j] = a_correlate(Img[*,i,j],k+1);2^k)
;;        if (acf_img[k,i,j] ge 0) and flag then begin
;;          sumPositiveRho += acf_img[k,i,j]
;;          contPos++
;;        endif else flag = 0
;;
;;      endfor
;;      ;for k = 0, p-1 do acf_img[k,i,j] = a_correlate(Img[*,i,j],2^k)
;;      acf_pr[i,j] = sumPositiveRho
;;
;;      posMin = where(acf_img[*,i,j] eq min(acf_img[*,i,j]))
;;      acf_prop[i,j] = total( abs(acf_img[0:posMin[0],i,j]) ) / total( abs(acf_img[posMin[0]:-1,i,j]) )
;;      ;acf_ratio[i,j] = (sumPositiveRho*contPos)/p
;;      acf_ratio[i,j] = (sumPositiveRho)/p
;;
;;    endfor
;;  endfor
;;
;;  Return, {lags: acf_img, sumPositiveRho: acf_pr, prop: acf_prop, ratio: acf_ratio}
;;  ;Return, {lags: acf_img, lagx: acfx_img}
;;END
;
;
;
;
;
;FUNCTION ACF_Lags_complete, Img
;
;  dims = size(Img,/dimensions)
;  p = floor(alog2(dims[0]))
;  acf_img = fltarr(p+1,dims[1],dims[2])
;  
;  for i = 0, dims[1]-1 do begin
;    for j = 0, dims[2]-1 do begin
;      for k = 0, p do acf_img[k,i,j] = a_correlate(Img[*,i,j],2^k)
;    endfor
;  endfor
;
;  Return, acf_img
;END
;
;
;;-----------------------------------
;FUNCTION ACF_LagX, Img
;
;dims = size(Img,/dimensions)
;p = dims[0]-1
;
;acf_img = fltarr(p/2,dims[1],dims[2])
;;acf_pr = fltarr(dims[1],dims[2])
;;acf_lagNullRho = fltarr(dims[1],dims[2])
;;acf_ratio = fltarr(dims[1],dims[2])
;acf_LBtest = fltarr(2,dims[1],dims[2])
;;acf_LBtest_lag1 = fltarr(2,dims[1],dims[2])
;;acf_chiLinear = fltarr(2,dims[1],dims[2])
;acf_rmseLinear = fltarr(dims[1],dims[2])
;;acf_rmseLinear_norm = fltarr(dims[1],dims[2])
;
;N = n_elements(acf_img[*,0,0])
;
;for i = 0, dims[1]-1 do begin
;  for j = 0, dims[2]-1 do begin
;    
;;    sumPositiveRho = 0.0
;;    sumNegativeRho = 0.0
;;    flag = 1
;;    contPos = 0
;    
;    for k = 0, (p/2)-1 do begin
;      acf_img[k,i,j] = a_correlate(Img[*,i,j],k+1)
;      
;;      if (acf_img[k,i,j] ge 0) and flag then begin
;;        sumPositiveRho += acf_img[k,i,j]
;;        contPos++   
;;      endif else flag = 0
;      
;      ;if ~flag then sumNegativeRho += abs(acf_img[k,i,j])
;      
;    endfor
;    
;;    acf_pr[i,j] = sumPositiveRho
;;    ;acf_ratio[i,j] = sumPositiveRho/sumNegativeRho
;;    ;acf_ratio[i,j] = (sumPositiveRho)/(sumNegativeRho)
;;    acf_ratio[i,j] = (sumNegativeRho eq 0) ? sumPositiveRho : (sumPositiveRho)/(sumNegativeRho)
;;    acf_lagNullRho[i,j] = contPos 
;;    
;;    for k = 0, (p/2)-2 do acf_LBtest[0,i,j] += (acf_img[k,i,j]^2)/float( (p/2) - (k+1) )
;;    acf_LBtest[0,i,j] = (p/2)*(p/2 + 2) * acf_LBtest[0,i,j]
;;    ;acf_LBtest[1,i,j] = 1 - CHISQR_PDF(acf_LBtest[0,i,j], (p/2))
;;    acf_LBtest[1,i,j] = 1 - CHISQR_PDF(acf_LBtest[0,i,j], (p/2) - 1 - 1)
;;    
;;    acf_LBtest_lag1[1,i,j] = 1 - CHISQR_PDF(acf_LBtest[0,i,j], (p/2) - 1 - 1)
;    
;    ;Ljiung-Box test for lag=1 only
;    ;for k = 0, 0 do acf_LBtest[0,i,j] += (acf_img[k,i,j]^2)/float( (p/2) - (k+1) )
;    acf_LBtest[0,i,j] = (acf_img[0,i,j]^2)/float(p -1)
;    ;acf_LBtest[0,i,j] = (p/2)*(p/2 + 2) * acf_LBtest[0,i,j]
;    acf_LBtest[0,i,j] = (p)*(p+2) * acf_LBtest[0,i,j]
;    ;acf_LBtest[1,i,j] = 1 - CHISQR_PDF(acf_LBtest[0,i,j], (p/2))
;    acf_LBtest[1,i,j] = 1 - CHISQR_PDF(acf_LBtest[0,i,j], 1)
;    
;    
;    ;Teste chi-2 sobre modelo linear
;    data = acf_img[*,i,j] ;(acf_img[*,i,j] - min(acf_img[*,i,j])) ;+ 0.1)
;    ;data /= total(data)
;    
;    ;maxY = max(data)
;    ;minY = min(data)
;    maxY = data[0]
;    minY = data[-1]
;    
;    residuals = data[*]*0 + 0
;;    expected = data[*]*0 + 1.0/N
;
;    a = (minY - maxY)/(p/2 - 1)
;    b = maxY - a*1
;    
;    for h = 0, N-1 do residuals[h] = (data[h])[0] - (((h+1)*a)+b)[0]
;    ;residuals[*] = residuals[*] - min(residuals[*])
;    ;residuals[*] /= total(residuals[*])
;    
;    ;potencial!
;    acf_rmseLinear[i,j] = sqrt(mean(residuals[*]^2))
;    ;acf_rmseLinear_norm[i,j] = sqrt(mean(residuals[*]^2))/(1+abs(maxY-minY))
;    ;acf_rmseLinear_norm[i,j] = sqrt(mean(residuals[*]^2))/(abs(maxY-minY)) < 1 ;(p/2)
;    ;acf_rmseLinear_norm[i,j] = sqrt(mean(residuals[*]^2)) / data[0] < 1
;    
;    
;    ;if acf_rmseLinear_norm[i,j] gt 398140 then stop
;    
;    
;    ;acf_rmseLinear[i,j] = sqrt(mean(residuals[*]^2))/exp(data[0])  ;ponderação pela autocorrelação de lag=1
;    
;    
;    
;;    for h = 0, N-1 do acf_chiLinear[0,i,j] += ((residuals[h] - expected[h] )^2)/expected[h]
;;    
;;    acf_chiLinear[1,i,j] = 1 - CHISQR_PDF(acf_chiLinear[0,i,j], N-1)
;
;
;
;;    if acf_chiLinear[1,i,j] lt 0.05 then begin
;;    ;if acf_chiLinear[0,i,j] gt 35 then begin
;;      plot, data[*] & xx = data[*]*0
;;      for h = 0, N-1 do xx[h] = (h+1)*a+b
;;      oplot, xx
;;      print, 1 - CHISQR_PDF(acf_chiLinear[0,i,j], N-1)
;;      stop
;;    endif
;
;
;
;    
;;    a = (minY - maxY)/(p/2 - 1)
;;    b = maxY - a*1
;;    for h = 0, N-1 do acf_chiLinear[0,i,j] += ((data[h] - (h+1)*a+b)^2)/abs((h+1)*a+b)
;;    acf_chiLinear[1,i,j] = 1 - CHISQR_PDF(acf_chiLinear[0,i,j], N-1)
;;
;;    ;if acf_chiLinear[1,i,j] lt 0.05 then begin
;;    if acf_chiLinear[0,i,j] gt 35 then begin
;;      plot, data[*] & xx = data[*]*0
;;      for h = 0, N-1 do xx[h] = (h+1)*a+b
;;      oplot, xx
;;      print, 1 - CHISQR_PDF(acf_chiLinear[0,i,j], N-1)
;;      stop
;;    endif
;    
;    
;;    maxY = max(acf_img[*,i,j])
;;    minY = min(acf_img[*,i,j])
;;    a = (minY - maxY)/(p/2 - 1)
;;    b = maxY - a*1
;;    ;for h = 0, N-1 do acf_chiLinear[0,i,j] += ((acf_img[h,i,j] - (h+1)*a+b)^2)/((h+1)*a+b)
;;    for h = 0, N-1 do acf_chiLinear[0,i,j] += ((acf_img[h,i,j] - (h+1)*a+b)^2)/abs((h+1)*a+b)
;;    acf_chiLinear[1,i,j] = 1 - CHISQR_PDF(acf_chiLinear[0,i,j], N-1)
;;    
;;    if acf_chiLinear[1,i,j] lt 0.05 then begin
;;      plot, acf_img[*,i,j] & xx = acf_img[*,i,j]*0 
;;      for h = 0, N-1 do xx[h] = (h+1)*a+b
;;      oplot, xx
;;      print, 1 - CHISQR_PDF(acf_chiLinear[0,i,j], N-1)
;;      stop  
;;    endif
;    
;    
;  endfor
;endfor
;
;
;;PRINT, CHISQR_CVF(0.100, 3)
;;pLB = 1 - CHISQR_PDF(acf_LBtest[i,j], (p/2)-1)
;
;;Return, {lags: acf_img, sumPositiveRho: acf_pr, ratio: acf_ratio, count: acf_lagNullRho, $
;;         LB: acf_LBtest, ChiLinear: acf_chiLinear, rmseLinear: acf_rmseLinear}
;
;
;Return, {lags: acf_img, $
;        ;sumPositiveRho: acf_pr, $ 
;        ;ratio: acf_ratio, $
;        ;count: acf_lagNullRho, $
;        LB: acf_LBtest, $
;        ;ChiLinear: acf_chiLinear, $
;        rmseLinear: acf_rmseLinear};, $
;        ;rmseLinearNorm: acf_rmseLinear_norm}
;  
;END
;
;
;
;
;;;;;;;;BKP
;;
;;;-----------------------------------
;;FUNCTION ACF_LagX, Img
;;
;;  dims = size(Img,/dimensions)
;;  ;p = dims[0]/2; dims[0]-1; floor(alog2(dims[0]))
;;  p = dims[0]-1
;;  ;p = floor(alog2(dims[0]))
;;
;;  ;acf_img = fltarr(p+1,dims[1],dims[2])
;;  acf_img = fltarr(p,dims[1],dims[2])
;;  ;acfx_img = fltarr(dims[1],dims[2])
;;  acf_pr = fltarr(dims[1],dims[2])
;;  acf_prop = fltarr(dims[1],dims[2])
;;  acf_ratio = fltarr(dims[1],dims[2])
;;
;;  for i = 0, dims[1]-1 do begin
;;    for j = 0, dims[2]-1 do begin
;;
;;      sumPositiveRho = 0.0
;;      flag = 1
;;      contPos = 0
;;      for k = 0, p-1 do begin
;;        acf_img[k,i,j] = a_correlate(Img[*,i,j],k+1);2^k)
;;        if (acf_img[k,i,j] ge 0) and flag then begin
;;          sumPositiveRho += acf_img[k,i,j]
;;          contPos++
;;        endif else flag = 0
;;
;;      endfor
;;      ;for k = 0, p-1 do acf_img[k,i,j] = a_correlate(Img[*,i,j],2^k)
;;      acf_pr[i,j] = sumPositiveRho
;;
;;      posMin = where(acf_img[*,i,j] eq min(acf_img[*,i,j]))
;;      acf_prop[i,j] = total( abs(acf_img[0:posMin[0],i,j]) ) / total( abs(acf_img[posMin[0]:-1,i,j]) )
;;      ;acf_ratio[i,j] = (sumPositiveRho*contPos)/p
;;      acf_ratio[i,j] = (sumPositiveRho)/p
;;
;;    endfor
;;  endfor
;;
;;  Return, {lags: acf_img, sumPositiveRho: acf_pr, prop: acf_prop, ratio: acf_ratio}
;;  ;Return, {lags: acf_img, lagx: acfx_img}
;;END
;
;
;
;
;
;;acf_prop[i,j] = total(acf_img[*,i,j])  ;total(acf_img[pos,i,j]) + abs(total(acf_img[neg,i,j]))
;
;;pos = where(acf_img[*,i,j] ge 0)
;;neg = where(acf_img[*,i,j] lt 0)
;;
;;;acf_prop[i,j] = total(acf_img[pos,i,j])/abs(total(acf_img[neg,i,j]))
;;;acf_prop[i,j] = mean(acf_img[pos,i,j])/abs(mean(acf_img[neg,i,j]))
;;
;;;    tt = total( abs(acf_img[*,i,j]) )
;;;    pp = total(acf_img[pos,i,j])/tt
;;;    nn = abs(total(acf_img[neg,i,j]))/tt
;;;    ;ee = -( pp*alog(pp) + nn*alog(nn) )
;;;    ee = pp*nn
;
;
;;for i = 0, dims[1]-1 do begin
;;  for j = 0, dims[2]-1 do begin
;;    ;for k = 0, p do acfx_img[k,i,j] = a_correlate(Img[*,i,j],2^k)
;;    acfx_img[i,j] = a_correlate(acf_img[*,i,j],1)
;;  endfor
;;endfor