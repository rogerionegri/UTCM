




;;@plot_histogram.pro  ;support functions
;;@misc.pro
;
;;Essential------------------------------------
;;@silhouette_method.pro
;;@__threshold.pro
;
;;@build_roi_train_base.pro
;;@acf_lags.pro
;
;;@acf_lags.pro
;
;;@map_seasonalpermanent.pro
;
;;Classifiers--------------------------------------
;@MLC.pro
;
;;@SVM.pro
;
;;@functions_aux.pro
;
;@interface_libsvm_train_predict__complete.pro
;;@text2image_libsvm_predict_format.pro
;
;
;@best_bouding_boxes.pro
;
;;HB process
;@check_homogenety_all_sizes.pro
;@find_homogeneous_blocks_if_possible.pro
;@check_homogenety.pro
;@find_homogeneous_blocks_if_possible.pro
;@bhattacharyya_unidimensional.pro
;
;;@svm__oneclass.pro
;
;@f_test_lin.pro



;----------------------------
;Bocalib
  @ascii_read_roi.pro
  @ClassificationFunctions.pro
  @MatVecFunctions.pro
  @MeasureFunctions.pro
  @ProbabilityFunctions.pro
  @ImageFunctions.pro

@build_walk.pro
  @read_paths.pro     ;oK!
  @smooth_filter.pro   ;ok!
  @pca_axis.pro       ;ok!

@map_homoblocks.pro
  @check_homogenety_all_sizes.pro
    @find_homogeneous_blocks_if_possible.pro
    @check_homogenety.pro
      @bhattacharyya_unidimensional.pro
      @best_bouding_boxes.pro
        @balanced_cut.pro

@build_level_map.pro

@MLC.pro

@ICM.pro
  @ICM_ADDS.pro
  @reorder4icm.pro

@svm_multiclass_libsvm.pro
  @image2text_libsvm_predict_format.pro
  @SVM_Functions.pro
  @interface_libsvm_train_predict__complete.pro
  @text2image_libsvm_predict_format.pro


;========================================
PRO UTCM

  ;Input description:
  ;'path_series' is a path to a text file containing a sequence of paths to images that define the data series
  ;'path_out' is a directory where the outputs are stored
  ;'prefix' is a simple/optional identifier used to better organize the outputs 
  ;'Atts' is a vector representing the selected features/bands of the images/data series
  ;'rho' is the size of the neighborhood considered by the low-pass filtering applied to smooth the input image series
  ;'optSave' is a logical flag used to define wheter intermediate output should be saved
  ;'alphaHB' and 'alphaF' are significance parameters' required by the methods
  ;'optMeth' defines de classification model used to generate the final change/non-change mapping.


  ;In/Out paths
  path_series = '/media/rogerio/Dados/base.ProjMADE/instant_images__NZ/simImageBased_06jul23/series.txt'
  path_out = '/home/rogerio/Desktop/IDLWorkbench.MADe/temp/'
  prefix = 'Sim_'
  Atts = [0,1]

  ;Internal parameters----------------------
  ratioLengthACF = 1   ;number of lags in the ACF (1 = all possible)
  optNorm = 1          ;flag for data normalization (1 = True)
  COMMON PkgOpSolvers, PATH_OP_SOLVERS ;Set this path to '.../LibSVM_solver/'
  PATH_OP_SOLVERS = "/home/rogerio/Desktop/IDLWorkbench.MADe/ProjMADE/Classifiers/OCSVM/LibSVM_solver/"

  ;Parameters-------------------------------
  rho = 2              ;datset detail (smoothing process/optional)
  optSave = 1          ;flag to define wheter save or don't the intermediate outputs (optional)
  alphaHB = 0.35       ;significance for homogeneous block identification
  alphaF = 0.09        ;significance for F-test (trend identification)

  paramsName = ['rho','alphaHB','alphaF','ratioLengthACF','optNorm']
  paramsValue = [rho,alphaHB,alphaF,ratioLengthACF,optNorm]
  ;-----------------------------------------


  ;Build TS-Walk representation---------------------
  walk = build_walk(path_series, path_out, prefix, rho, Atts, optSave, optNorm, ratioLengthACF)


  ;Seeding process----------------------------------
  ;First division: Non-changed areas/position identifyed from low variability homogeneous regions.
  imDevWalk = reform(walk.stat[1,*,*],walk.dims[1],walk.dims[2]) ;Standard deviation of "walk" values for each pixel
  MHB = Map_homoBlocks(imDevWalk, alphaHB) ;HBS.tauDev is defined inside...

  ;Second division:
  levelMap = build_level_map_seeds(walk, MHB.tauDev, alphaF)


  ;MLC
  classMLC = MLC(walk.walk,levelMap.rois)
  mlc_icm = ICM(classMLC.Index+1,1.0,10,n_elements(levelMap.rois),reorder4icm(classMLC.RuleImage),'NULL')
  mlc_icm_cla = COLORIZE_INDEX(mlc_icm[*,*]-1, levelMap.rois)
  tvscl, congrid(classMLC.classification,3,500,500), true=1

  ;stop

  ;SVM (fixed hyperparameters: C=1000, RBF's gamma=2.5, Epsilon=10e-5, Multiclass strategy=OAA )
  Params = {Penalty: 1000, KernelType: 2, KernelParameters: [3, 2.5, 0], Strategy: 0, Epsilon: 0.00001, Shrinking: 0}
  classSVM = SVM_MULTICLASS_LIBSVM(walk.walk,levelMap.rois,Params)
  svm_icm = ICM(classSVM.Index+1,1.0,10,n_elements(levelMap.rois),reorder4icm(classSVM.RuleImage),'NULL')
  svm_icm_cla = COLORIZE_INDEX(svm_icm[*,*]-1, levelMap.rois)
  tvscl, congrid(classSVM.classification,3,500,500), true=1

  stop
  print, 'end...'
END

